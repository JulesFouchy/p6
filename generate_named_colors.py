import string
import urllib.request
import json
import unicodedata

def format_hex(str: string):
    str = str.replace("#", "").upper()
    if len(str) == 3:
        str = str[0] + str[0] + str[1] + str[1] + str[2] + str[2]
    assert(len(str) == 6)
    return str

def format_name(str: string):
    return unicodedata.normalize('NFKD',
           str.replace(" ", ""
             ).replace("(", ""
             ).replace(")", ""
             ).replace("-", ""
             ).replace("/", ""
             ).replace("'", ""
             ).replace("#", ""
             ).replace("&", ""
             ).replace(".", ""
             )
    ).encode('ascii', 'ignore').decode('ascii')

# Load colors data
colors_json = json.loads(urllib.request.urlopen(
                "https://raw.githubusercontent.com/mralexgray/color-names/json/output/colors.json"
              ).read())
# Format name and hex
for color in colors_json.values():
    color['name'] = format_name(color['name'])
    color['hex'] = format_hex(color['hex'])

# Add spaces to align all the colors values
max_length = max(map(lambda color: len(color['name']), colors_json.values()))
for color in colors_json.values():
    color['name'] += ' ' * (max_length - len(color['name']))

# Generate colors list
colors_list = ""
for color in colors_json.values():
    colors_list += f"static constexpr Color {color['name']} = hex(0x{color['hex']});\n"

# Generate final C++ code
cpp_code = """// This file was auto-generated by generate_named_colors.py
// Please don't edit the file directly, go to the script!

#pragma once
#include "Color.h"

namespace p6::NamedColor {

%s
} // namespace p6::NamedColor
""" % colors_list

# Write to file
with open('src/NamedColor.h', 'w') as f:
    f.write(cpp_code)